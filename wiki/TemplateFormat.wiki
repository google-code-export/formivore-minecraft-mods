=The Template Format=
==Overview==
The Great Wall Mod and the Walled City Generator use the .tml (template) format adapted from d00dv4d3r’s ruins mod to define the look of walls and buildings. The format combines both variables the control parts of structures that are automatically generated and a block by block grid schematic. Template files can be edited in any text editor.
Each template file has three sections, for variables, block rules, and layers. This guide describes each of these sections.
Variables – control things like width, frequency, and material of parts of structures that are automatically generated.
Block Rules – Lists of blocks that can be generated in layers.
Layers – A block by block grid used to generate custom buildings and wall cross sections.
Also the customization section of the F.A.Q. answers some common questions regarding things you can do with the template files.
===How The Mods Use Template Files===
Both the Walled City Mod and the Great Wall Mod are designed around walls; in this case walls can mean either great walls, the outer walls of a city, or the (zero height) streets inside a city. Walls will generate buildings alongside, these can be either the default procedurally generated towers or building templates. The mods use template files for two purposes that are somewhat different but similar enough that I decided to maintain them in a single format:
Wall Templates – Here the template variables define the wall and the default towers built alongside the wall. The layers specify cross sections of the wall which are repeated for as long as the wall runs.
Building Templates – Here the layers specify the full 3D schematic of custom buildings that can be built alongside walls.
==File Locations==
All template directories are in the located in the resources folder. All templates are loaded when minecraft launches.
===File Locations - Great Wall Mod===
  * Wall Templates: /resources/greatwall
  * Building Templates: /resources /greatwall/buildings
===File Locations – Walled City Mod===
  * Outer Wall Templates: resources/walledcity
  * Outer Wall Building Templates: resources/walledcity/buildings
  * Street Templates: resources/walledcity/streets
  * Street Building Templates: resources/walledcity/streets

==Converting to the Template Format==
A script is available that can convert MCEdit schematics to templates files: Schematic to template converter

=Variables=
Variables control the size, shape, frequency, material, and many other aspects of structures. In particular buildings like the default procedurally generated towers do not have any layers associated with them and are instead totally determined by variable settings. 
Variables have a simple format, with one line per variable:
\<variable name\>=\<value\>
The order variables appear in the template file does not matter.
==Standard Variables==
These variables should be provided for all template files used by the Great Wall Mod and the Walled City Mod.
weight=<weight>
The likelihood weight of template during random generation. Weight is relative to the sum of weights provided for other templates that perform the same role. For example if there are two wall templates for city walls, a sandstone template (weight=2) and a cobblestone template (weight=3) the chance of generating sandstone city walls will be 40%.
A separate calculation is done for the templates provided for city streets, street buildings, etc.
Defaults to 1.

embed_into_distance=<depth>
Specifies how many z-levels of the template will be below ground. Note that for buildings constructed alongside walls, "ground level" is actually specified by the walk_height variable of the wall. Use this to construct basements, foundations, and anything below walking level.

dimensions=<height>,<width>,<length>
The dimensions of the template you are providing. Height is the number of layers provided. Width is the North-South width. Length is the East-West width. For reference, north is the top of the text file. Note that wall template dimensions will have a different interpretation, but you should still give dimension values in the same order as the standard layout(i.e. the first value=number of layers).  See LAYERS below for more details.

max_leveling=<leveling>
Specifies the maximum depth below the source block that will be filled in order to level the site.  If there is more air directly below the maximum depth, the template will not be built. If a base layer is provided this will be used for leveling, otherwise local blocks will be used. Any leveling will take place before the site is built, preserving basement space.
Defaults to 4.

max_cut_in =<cut_in>
Specifies the maximum height above the source block that will be set to air in order to clear the site.
Defaults to 0.

***NOTE: The following variables from the ruins mod are currently NOT supported and will be ignored:
unique, acceptable_target_block, allowable_overhang, leveling_buffer ,cut_in_buffer, preserve_water, preserve_lava, preserve_plants.


==Wall Template Variables==
A number of additional variables are required from template files that describe walls.
biomes=<biome1>,<biome2>,<biome3>,...
A comma-separated list of the biomes that can spawn this wall or city type. Should only be used for top-level templates (not child templates). Instead of a list, you may have biomes=ALL to allow spawning in all biomes. Listing the Underground biome for city templates indicates that this city type will only spawn underground. Allowable biomes are: Rainforest, Swampland, Seasonal Forest, Forest, Savanna, Shrubland, Taiga, Desert, Plains, Ice Desert, Tundra, Hell, Sky, Hills, Ocean, Underground
Defaults to ALL.

building_templates=<filename1>,<filename2>,<filename3>,...
A comma-separated list of template file names that will be used to construct buildings alongside this wall. Instead of a list, you may have either building_templates=ALL or building_templates=NONE which will load all or none of the templates in the building folder as potential child templates. These files should be placed in the building subfolder.
Defaults to ALL.

street_templates=<filename1>,<filename2>,<filename3>,...
Only for city wall templates used in the Walled City mod. A comma-separated list of template file names that will be used to generate streets inside the current template. Instead of a list you may have street_templates=ALL or street_templates=NONE which will load all or none of the templates in the streets folder as potential child templates. These files should be placed in the streets subfolder.
Defaults to ALL.

street_density=<density>
Only for city wall templates used in the Walled City mod. Should be an integer between 0 and 20.
Defaults to 6.

merge_walls=<1/0>
Only for the Great Wall Mod. If set to 1 will allow walls to merge and cross over each other. Useful to create infinite cities.
Defaults to 0.

level_interior=<1/0>
Only for city wall templates used in the Walled City mod. If set to 1 the city interior will be leveled to remove water and excessive high and low points.
Defaults to 1.

walk_height=<height>
For walls that serve as a roadway, the height of the roadway (relative to the bottom of the template). This value is used for a)positioning elements such as towers to allow transit b)ensuring this level is always above water.
Defaults to 0.

min_length=<length>
max_length=<length>
The minimum and maximum allowed lengths of the wall.
Defaults to 150/1000.

building_interval=<buildling_interval>
The minimum separation required between buildings built alongside this wall.
Defaults to 75.

make_buildings=<1/0>
If set to 1 make buildings along side this wall, if set to 0 don't.
Defaults to 1.

make_end_towers=<1/0>
If set to 1 make towers at the wall endpoints, if set to 0 don't.
Defaults to 1.


==Default Tower Variables==
These variables control the style of the default resizable towers. These variables should also be provided in each wall template file.
tower_rule=<ruleID>
The rule number of the primary blocks used to construct towers. 
Defaults to none (uses tower_block).

default_tower_weight=<weight>
The weight of towers. Both default towers and buildings from template listed in the building_templates variable can be generated alongside walls. This weight specifies how likely default tower are relative to template buildings.
Default to 1.

tower_offset=<offset>
The x offset (distance from centerline) of side towers from the wall edges. Negative values will create towers closer to the center.
Defaults to 0.

mob_probability=<probability>
Probability that a tower will contain zombie, skeleton, or creeper spawners. Also gives a chance to spawn chests.
Default to 0.2.

zombie_pigmen_probability=<probability>
enderman_probability=<probability>
cave_spider probability=<probability>
Probability that the tower will contain a spawner of the given type.
Default to 0.0.

chest_probability=<probability>
Additional probability that the tower will contain chests.
Default to 0.0.

populate_furniture=<1/0>
If set to one mod will generate some furniture inside of towers.
Defautls to 0.

circular_probability=<probability>
Probabily that a tower will have a circular cross section. Otherwise it will be square.
Default to 0.3.

square_min_height=<height>
square_max_height=<height>
square_min_width=<width>
square_max_width=<width>
circular_min_height=<height>
circular_max_height=<height>
circular_min_width=<width>
circular_max_width=<width>
The range of heights and widths allowed for square and circular towers respectively. Actual dimensions will be chosen randomly from these ranges.
Default to 11/15/7/7/11/16/7/7

square_roof_styles=<style1>,<style2>,... 
circular_tower_roof_styles=<style1>,<style2>,...
Lists of allowed roof style for towers. Styles may be repeated to increase their weight. 
Allowable roof styles are: Crenel, Steep, Steep Trim, Shallow, Dome, Cone, Two Sided
Defaults to: Crenel

square_roof_rule=<ruleID>
circular_tower_roof_rule=<ruleID>
The rule number used to generate roofs for towers.
If no rule is provided a default choice is made based on tower_block.

=Block Rules=  
(Note – this sections adapted from d00dv4d3r's Ruins Mod)
Rules are lists of blocks that are used to populate layers, the flexibility of allowing more than one type of block in a given location allows for a “ruined” look, mottled textures, and more variable designs.
Each rule must be formatted carefully, the format is:
rule<number>=<condition>,<chance to appear>,<list of blocks>

rule<number>
The mod does not care what you call these and will number the rules in the order they are loaded (sequentially from 1), so long as the line starts with "rule".  I suggest using "rule#" as a mnemonic, such as "rule1", "rule2", "rule12", etc...  Once the templates are loaded, the first rule in the list becomes rule #1 for the purposes of building a layer, the second becomes rule #2, and so on.
The mod uses a special rule, 0, which defines the Air block with a 100% spawn rate and no conditional.  You can use this rule in the layers to "blank out" certain areas (providing space for mobs, for instance).
<condition>
A conditional to the block being placed, aside from randomness.
0 - The block always attempts to spawn.
1 - There must be a block below it to attempt to spawn.
2 - There must be an adjacent block at the same level for a spawn attempt.
3 - There must be a block above this one in order for it to attempt to spawn.
5 – Choose and fix the blocktype for this rule once per template.

Adjacent in this case is not diagonal, only along the cardinal directions.
Adjacent blocks are processed after 0 and 1 conditionals have been placed, and "under blocks" are processed after all other blocks have been placed. Please note that these blocks are still processed in an order dependent on the rotation of the site.  For a normal, north-facing site, the block rules are processed for each line from the left and from the bottom template to the top.
<chance to appear>
The chance that this block will appear, out of 100, depending on whether the condition above is met.

<list of blocks>
A comma-delimited set of minecraft blockIDs.  This will determine what block will actually spawn in the location.  Each blockID is given the same weight, so you can skew the odds of a certain blockID appearing by adding it multiple times.  You can specify block metadata by adding a "-<metadata>" after the blockID.  For instance, to place a cobblestone stairs block ascending to the east, use 67-3.  To place a wood half-block (slab), use 44-2.

Special blockIDs – These are block IDs that instead of creating the correspondingly numbered block in the world, tell the mod to make certain things that can’t be coded by a single block ID. These include mob spawners, chests with different loot, and steps/stairs.
    300 = Leave existing world block alone
    301 = Mob Spawner (Zombie)
    302 = Mob Spawner (Skeleton) 
    303 = Mob Spawner (Spider)
    304 = Mob Spawner (Creeper)
    305 = Mob Spawner (Zombie, Skeleton, Creeper)
    306 = Mob Spawner (Easy, zombies and skeletons)
    307 = Mob Spawner (Medium, zombies, skeletons, and spiders)
    308 = Mob Spawner (Hard, all mobs)
    309 = Easy Chest (For Easy rewards)
    310 = Medium Chest (For Medium rewards)
    311 = Hard Chest (For Hard rewards)
    312 = Tower Chest;
    313 = Mob Spawner (Pig Zombie);
    314 = Mob Spawner (Enderman);
    315 = Mob Spawner (Cave Spider);
    316 = Mob Spawner (Ghast);
    319 = Compact/Half Stair – For wall templates. This will build either nothing, a half step, or a compact step depending on how the z-level of the wall is changing. Takes the same meta values as half-step blocks and will choose a matching compact step.

Rule Examples
Example 1, this spawns either air, cobblestone, or a mossy cobblestone 100% of the time:
rule1=0,100,0,4,48

Example 2, this spawns a mossy cobblestone 50% of the time but only if another block is underneath it:
rule1=1,50,48

Example 3, this spawns either a wood slab or a plank block, but only if there is an adjacent block on the same level:
rule1=2,100,44-2,5

Example 4, this spawns a torch standing on the ground:
rule1=0,100,50-5

Example 5, this spawns a Medium Chest (see special blockID above) 25% of the time:
rule1=0,25,310

=Layers=
Layers are where you actually provide the layout of the template. Each layer is a comma-delimited grid, with each block in the grid containing a rule. If you want the block blanked out use 0, which represents the Air-block rule. Each layer must have "layer" before the rule grid and terminate with "endlayer".
Example 1, a layer:
layer
0,1,0
1,1,1
2,2,2
endlayer

How the layers are laid out depends on what the template used for. There are two types:

==Standard Layout=
This is the layout used for templates in the ruins mod and is used for building templates in the Walled City and Great Wall mods. Here each layer represents a horizontal slice and there are as many layers as the height. In each layer, there are as many rows as the length and as many columns as the width. To orient directional blocks like stairs, the orientation of layers in the text file is as North pointing towards the top of the file. When templates are built alongside a wall, the building will be rotated so that North will become the direction pointing away from the wall, and South face will be touching the wall.
        
==Wall Cross Section Layout==
This layout is used for wall templates. Here each layer represents a vertical slice. During wall generation layers are used in order and repeated from the beginning once the last layer is reached. In each layer there as many rows as the wall height and as many columns as the wall width. The default orientation of a layer is that the top of the grid corresponds to up, and left of the grid corresponds to west. The default direction the wall will be propagated, and hence the order of the layers is south to north. The wall cross-section layout can be thought of as the standard layout flipped over onto its southern face.
 
       
==Named Layers==
Named layers are not part of a layout, but are rather used for special purposes by the code. Named layers are distinguished by a label after the "layer" tag, separated by a colon. E.g.
Example 2, named layer:
layer:shifted_right
1,1,1,1,1
1,0,0,0,1
endlayer


The following named layers are currently recognized:
layer:base
A horizontal slice used as a repeatable base. This layer is used to fill in air or water below the template until solid blocks are reached. Maximum number of layers that can be filled is given by the max_leveling variable. In the standard layout, the dimensions of the base layer should be the same as unnamed layers. In the cross-section layout there should only be one row; this row will be used as the base of each vertical unnamed slice.
 
layer:shifted
layer:shifted_right
layer:shifted_left
layer:shifted_up
layer:shifted_down
These named layers are used by wall templates to provide layers when a wall deviates from a straight line. For various reasons you may not want to use the unnamed layers in this case. If the specific layer:shifted_right, layer:shifted_left etc. are not given layer:shifted will be used. If layer:shifted is not given the first unnamed layer will be used.